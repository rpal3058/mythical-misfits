version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Docker Hub...
      - docker login --username $DOCKERHUB_USERNAME --password $DOCKERHUB_PASS
  build:
    commands:
      # look at this if there is docker deamon error when building docker imagehttps://docs.aws.amazon.com/codebuild/latest/userguide/troubleshooting.html#troubleshooting-cannot-connect-to-docker-daemon
      #  make sure the CodeBuild runs in priveldged mode (look at Envirement -> Overide Image -> Priveldged)
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t rwijupal3058/mythicalmisfits:v1 ./app
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push rwijupal3058/mythicalmisfits:v1
      - echo Completed pushing Docker image. Deploying Docker image to AWS Fargate on `date`
      # Create a artifacts file that contains the name and location of the image
      # pushed to ECR. This will be used by AWS CodePipeline to automate
      # deployment of this specific container to Amazon ECS.
      # NOTE: make sure the "name" below is that of CONTAINER NAME available in TASK DEFINITION JSON in ECS
      # IMAGE: 
      # Rolling update - 
      # - printf '[{"name":"MythicalMisfits","imageUri":"rwijupal3058/mythicalmisfits:v1"}]' > imagedefinitions.json
      #Bluegreen - 
      # https://docs.aws.amazon.com/codepipeline/latest/userguide/file-reference.html#file-reference-ecs-bluegreen
      - printf '[{"name":"MythicalMisfits","imageUri":"rwijupal3058/mythicalmisfits:v1"}]' > imageDetail.json 

# Rolling deployment
# artifacts:
#   # Indicate that the created imagedefinitions.json file created on the previous
#   # line is to be referenceable as an artifact of the build execution job.
#   files: imagedefinitions.json


# Blue Green Deployment
artifacts:
  files: 
    - 'image*.json'
    - 'appspec.yml'
    - 'taskdef.json'
  secondary-artifacts:
    DefinitionArtifact:
      files:
        - appspec.yml
        - taskdef.json
    ImageArtifact:
      files:
        - imageDetail.json    